-- Converting sales date formatted as string/text to proper date format
-- first create a new date column
ALTER TABLE sales_data
ADD COLUMN new_date DATE;

-- update the new column with dates in the sales date column and convert it from text/string to proper date formats
UPDATE sales_data
SET new_date = STR_TO_DATE(sales_date, '%d/%m/%Y'); 

-- drop sales date column
ALTER TABLE sales_data
DROP COLUMN sales_date;

-- rename new date to sales date
ALTER TABLE sales_data
RENAME COLUMN new_date TO sales_date;

-- change the position of sales date to second column
ALTER TABLE sales_data
MODIFY COLUMN sales_date DATE AFTER order_number;

-- 1. How many transactions were recorded in total?
-- Use the COUNT function to find the total number of transactions
SELECT COUNT(*) AS  total_transactions
FROM sales_data;
-- A total number of 20,000 transactions were made

-- 2. How many transactions were generated by each sales channel and percentage contributed by each sales channel?
-- Use sales channel as the group by column

/*
Steps:
* COUNT the total transactions
* Divide the result of each sales channel with the COUNT of total transactions
* ROUND the results to 2 decimal points
* GROUP BY sales_channel
*/

SELECT sales_channel, 
COUNT(*) AS transactions_by_sales_channel, 
ROUND((COUNT(sales_channel) / (SELECT COUNT(*) FROM sales_data)) *100, 2)  AS trans_perc_by_sales_channel
FROM sales_data
GROUP BY sales_channel; 

-- 5056 transactions were made from online sales channel. There were 4916 transactions from wholesale channel, 5040 from In-Store, and 4988 from Distributor

-- Creating a calculated column for sales price
ALTER TABLE sales_data
ADD COLUMN sales_price DECIMAL (6, 2);


-- Populate sales price column
UPDATE sales_data
SET sales_price = order_quantity * unit_price;

-- Creating a calculated column for profit
ALTER TABLE sales_data
ADD COLUMN profit DECIMAL (6, 2);

-- Populating the profit column
UPDATE sales_data
SET profit = sales_price - (order_quantity * unit_cost);

-- What is the average order quantity?
-- Calculating AVG order quantity
SELECT AVG (order_quantity) AS avg_order_quantity
FROM sales_data;

-- 5.52 is the average order quantity

-- 3. How many order quantities are greater than average order quantity?
/*
Steps:
* Use CTE to generate average quantity first
* Then COUNT total transactions with order quantities greater than average order quantities
*/

WITH average_order_quantity(avg_order) AS
(SELECT AVG(order_quantity) FROM sales_data)
SELECT COUNT(*) AS order_quantities_greater_than_avg_ord_quantity
FROM sales_data, average_order_quantity
WHERE sales_data.order_quantity > average_order_quantity.avg_order;

-- There were 10027 orders greater than average order quantities

-- What are the average order quantities by each channel? Compare with general average order quantity?
SELECT sales_channel, AVG(order_quantity)  AS avg_order_quantity_by_sales_channel
FROM sales_data
GROUP BY sales_channel
ORDER BY avg_order_quantity_by_sales_channel DESC;

-- What is the total order quantity?
SELECT SUM(order_quantity) AS total_order_quantity
FROM sales_data;

-- There were 110402 total quantity ordered

-- Calculating total order quantity by sales_channel
SELECT sales_channel, SUM(order_quantity) AS total_order_quantity_by_sales_channel,
ROUND(SUM(order_quantity) / (SELECT SUM(order_quantity) FROM sales_data) * 100 , 2) AS percentage_order_quantity
FROM sales_data
GROUP BY sales_channel
ORDER BY total_order_quantity_by_sales_channel DESC;

-- rename sales price column to revenue
ALTER TABLE sales_data
RENAME COLUMN sales_price TO revenue;


-- Calacualting total revenue
SELECT SUM(revenue) AS total_revenue
FROM sales_data;

-- Calacualting total revenue by sales_channel and percentage of the revenue generated by each channel
SELECT sales_channel,
SUM(revenue) AS total_revenue_by_sales_channel,
ROUND(SUM(revenue)  / (SELECT SUM(revenue) FROM sales_data) * 100, 2) AS percentage_revenue
FROM sales_data
GROUP BY sales_channel
ORDER BY percentage_revenue DESC;


-- top ten products with by average revenue and profit
SELECT product_name, AVG(average_revenue_by_product) AS average_revenue, AVG(average_profit_by_product) AS average_profit
FROM (SELECT product_name, AVG(revenue) AS average_revenue_by_product, AVG(profit) AS average_profit_by_product
FROM sales_data
INNER JOIN product
ON sales_data.product_index = product.product_index_number
GROUP BY product_name
ORDER BY average_revenue_by_product, average_profit_by_product DESC) sub
GROUP BY product_name
LIMIT 10;

-- Stores with profits above average profit generated across all stores
WITH total_sales (state, total_profit_per_state) AS 
(SELECT state, SUM(profit) AS total_profit_per_state
FROM sales_data
INNER JOIN store_location
ON sales_data.store_index = store_location.store_id
GROUP BY state
ORDER BY total_profit_per_state DESC),
avg_sales (avg_profit_of_all_states) AS
(SELECT AVG(total_profit_per_state) AS avg_profit_of_all_states FROM total_sales)
SELECT state, total_profit_per_state
FROM total_sales
INNER JOIN avg_sales
ON total_sales.total_profit_per_state > avg_sales.avg_profit_of_all_states;

-- profits by product category
SELECT product_category,
SUM(profit) AS total_profit_by_product
FROM sales_data
INNER JOIN product
ON sales_data.product_index = product.product_index_number
GROUP BY product_category
ORDER BY total_profit_by_product DESC;

-- The top three performing sales team by revenue
SELECT sales_team,
SUM(revenue) AS revenue_by_sales_team
FROM sales_data
INNER JOIN sales_team
ON sales_data.sales_team_index = sales_team.sales_index
GROUP BY sales_team
ORDER BY revenue_by_sales_team DESC;

-- revenue by month and percentage
SELECT YEAR(sales_date) AS years, MONTH(sales_date) AS months,
SUM(revenue) AS monthly_revenue, ROUND((SUM(revenue) - LAG(SUM(revenue), 1, 0) OVER (ORDER BY YEAR(sales_date), MONTH(sales_date))
)/LAG(SUM(revenue), 1, 0) OVER (ORDER BY YEAR(sales_date), MONTH(sales_date)),2)*100  AS monthly_growth_percentage
FROM sales_data 
INNER JOIN sales_team
ON sales_data.sales_team_index = sales_team.sales_index
INNER JOIN product
ON sales_data.product_index = product.product_index_number
GROUP BY YEAR(sales_date), MONTH(sales_date)
ORDER BY YEAR(sales_date), MONTH(sales_date);
